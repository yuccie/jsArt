---
layout: post
title: About git
date: Fri May 10 2019 17:25:20 GMT+0800 (中国标准时间)
---

参考：[阮一峰-常用 git 命令操作](http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html)

参考：[阮一峰-远程操作详解](http://www.ruanyifeng.com/blog/2014/06/git_remote.html)

参考：[阮一峰-工作流](http://www.ruanyifeng.com/blog/2015/12/git-workflow.html)

工作区：就是我们本地的目录，还没有被 git 管理
暂存区：git 开始管理，只是还没有提交到分支上
commit: commit 后就将暂存区的内容提到分支上了，如果此时在 git push 则把本地修改同步到远程

#### git 查看终端帮助文档

```bash
# 比如查看git commit相关，可以如下
$ git help commit
```

#### .gitignore 规则不生效的解决办法

原因是.gitignore 只能忽略那些原来没有被 track 的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore 是无效的。那么解决方法就是先把本地缓存删除（改变成未 track 状态），然后再提交：

**注意：** `git rm`是删除暂存区和分支上的文件，同时本地也不需要了，使用。而`git rm --cached`只是删除暂存区和分支上的，本地还需要，只是不被版本控制了。其实若想用`git`管理文件，则使用`git rm`相关，若新建一个文件，并没有提交到暂存区，此时用`git rm或git rm --cache`是找不到这个文件的，此时应该直接用`rm`

```bash
git rm -r --cached 文件名
git add .
git commit -m 'update .gitignore'
```

匹配规则：

- 所有空行或#开头的行都会被忽略；
- 文件或目录前加 / 表示仓库根目录的对应文件；
- 匹配模式最后跟反斜杠 / 说明要忽略的是目录；
- 要特殊不忽略某个文件或目录，可以在模式前加上取反 ! 。

```bash
# 忽略目录 fd1 下的全部内容，不管是根目录的还是子目录的，但不屏蔽fd1目录本身
fd1/*
# 屏蔽fd1目录
fd1/
# 只忽略根目录fd1下的所有
/fd1/*
# 所有以 '.a' 为后缀的文件都屏蔽掉
*.a
# 仓库中所有名为 tags 的文件都屏蔽
tags
# 仓库中所有以 'core.' 开头的文件都屏蔽
core.*

# mac系统创造的隐藏文件
.DS_Store

# idea编辑器用来存放配置信息的文件
.idea

# 忽略根目录，子目录中所有node_modules及子其目录
node_modules

# 忽略根目录，子目录中所有dist及子其目录
dist

# 忽略根目录public及其子目录
/public



```

#### git 常用操作

```bash
# 丢弃暂存区修改,注意这里是已经被跟踪的文件
$ git checkout -- .

# 丢弃暂存某个文件修改
$ git checkout -- xxx

# 丢弃未追踪(untracked)的文件（也就是工作区）,后可跟具体文件，不跟则全部删除
$ git clean -f

# 连untracked的目录（工作区）也一块删掉
$ git clean -fd

# 若untracked的目录有子目录，可以如下全部删除
$ git clean -fd -f

# 删除某个分支（强制删除：-D）
$ git branch -d xxx

# 删除远程分支
$ git push origin -delete xxx

# 修改分支名（未推到远程）
$ git branch -m oldName newName

# 修改分支名（推到远程）
$ git branch -m oldName newName                 # 1. 修改本地
$ git push origin --delete oldName               # 2. 删除远程
$ git push origin newName                       # 3. 推到远程
$ git branch --set-upstream-to=origin/newName   # 4. 本地与远程相关联

# 保存当前修改，再拉取远程更新或切换到远程
$ git stash

# 想再恢复之前的保存，用如下命令
$ git stash pop

# 重命名本地分支名
$ git branch -m old-name new-name

# 查看带详细分支图的提交日志
$ git log --graph

# 修改已经提交的commit，会让你修改上次的提交内容
git commit --amend
```

#### 禁用 package-lock.json

```bash
# 当前项目里禁用
echo 'package-lock=false' >> .npmrc
echo 'package-lock.json' >> .gitignore

# 当前机器当前用户，所有项目禁用
npm config set package-lock false
```

#### 命令行初始化一个仓库

```bash
echo "# test" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin git@xxx/xxx.git
git push -u origin master
```

#### 添加一个已有的仓库

```bash
# 只是初始化一个仓库的后两个步骤
git remote add origin git@xxx/xxx.git
git push -u origin master
```

#### git 远程主机常用操作

```bash
# 查看远程主机名(-v 查看远程主机的详细地址)
$ git remote
// origin

# 查看远程主机详细信息
$ git remote show <主机名>

# 添加远程主机
$ git remote add <主机名> <仓库地址>

# 删除远程主机
$ git remote rm <主机名>

# 重命名远程主机名
$ git remote rename <原主机名> <新主机名>

# 修改远程仓库地址，url地址有https与ssh两种
$ git remote set-url origin [url]

# 远程分支已删除，本地还没删除，可以通过以下命令同步一下
$ git remote prune origin
```

#### git fetch

```bash
# 获取指定远程主机上所有分支的更新
$ git fetch <远程主机名>

# 获取指定远程主机,指定分支上的更新
$ git fetch <远程主机名> <分支名>

# 获取的远程更新，需用 远程主机名/分支名 读取，切换到获取的更新master分支
$ git checkout origin/master

# 在获取的远程更新分支基础上新建分支
$ git checkout -b newBranch origin/master

# 将获取的远程master更新分支合并到当前分支
$ git merge origin/master
或者
$ git rebase origin/master
```

#### git pull

```bash
# 获取远程next分支的更新，然后合并到本地master分支
# 若合并到本地当前分支，则省略冒号后面的部分
$ git pull origin next:master

# 上面操作等同于下面操作
$ git fetch origin
$ git merge origin/next

# 在clone仓库时，git会自动在本地与远程同名分支之间，建立一种追踪关系（tracking）
# 当然也可以手动建立追踪关系，如下本地master与远程next分支
# $ git branch --set-upstream master origin/next // 这个命令废弃了
git branch --set-upstream-to=origin/myBranch myBranch

# 如果当前分支与 远程追踪分支 存在追踪关系，可以省略远程追踪分支名
# 当前分支还可以同时追踪多个远程分支？？
$ git pull origin

# 如果当前分支只有一个追踪分支，主机名都可以省略
$ git pull

# 远程删除了某些分支，如果本地也想删除这些分支，可以如下：
$ git pull -p
```

#### git push

```bash
# 将本地master分支的更新推送到远程主机next分支上
$ git push origin master:next

# 省略远程分支名，则表示将本地分支推送到与之存在追踪关系的远程分支。推送本地分支到远程分支
# 如果远程分支不存在，则会新建
$ git push origin master

# 如果省略本地分支，则表示删除指定的远程分支
# 因为这等同于推送一个空的本地分支到远程
$ git push origin  :master
# 等同于
$ git push origin  --delete master

# 如果当前分支与 远程追踪分支 存在追踪关系，则可以省略本地及远程分支
$ git push origin

# 如果当前分支只有一个追踪分支，主机名都可以省略
$ git push

# 如果当前分支与多个主机存在追踪关系，则可以使用-u指定一个默认主机
# 如下将本地master分支推送到origin主机，同时指定origin为默认主机
$ git push -u origin master

# 如果远程主机版本比本地版本新，推送时会报错，应该先pull再push
# 如果强推则会覆盖远程，如下
$ git push --force origin
```

#### git rebase

参考：[廖雪峰-git rebase 解析](https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0015266568413773c73cdc8b4ab4f9aa9be10ef3078be3f000)

参考：[failed to push some refs to](https://blog.csdn.net/MBuger/article/details/70197532)

```bash
# 多人开发一个分支时，远程更新后，本地commit后直接push后会出错，此时若先pull后push，则提交记录会分叉
# 为了让提交记录在一条直线上同时解决问题，可以如下，然后push即可
$ git pull --rebase origin master
```

#### 代码回滚

```bash
# 代码已经提送至远程，可以用 git revert，
# 注意另外一个好处就是：不是重写之前的提交记录，而是增加记录，而且是撤销指定的提交。
# 表示回滚到上一次提交(其实就是撤销最近一次的提交)
git revert HEAD

# 指定回滚到哪一次，如果想撤销不连续的提交，可以空格分开
git revert HEAD~3

# 若是想直接回滚到某个点，可以直接
# 之前的提交记录会被移除，慎用
git reset --hard 提交鸡柳
```

#### bash 常用操作

```bash
# 查看gcam中每个参数的意义
$ git help commit
// -a, --all
// Tell the command to automatically stage files that have been modified and deleted, but new files you have not told Git about are not affected.

# 用于查找并显示给定命令的绝对路径(),但mac下如下显示
$ which gcam
// gcam: aliased to git commit -a -m

# 对比一下alias
$ alias gcam
// gcam='git commit -a -m'
```

### oh my zsh 常用操作

参考：[oh-my-zsh](https://github.com/robbyrussell/oh-my-zsh/blob/master/plugins/git/git.plugin.zsh)

```bash
# 查看所有别名,当然除了oh-my-zsh的命令别名，还有系统级别的，比如ls
$ alias

# 管道符查看含gcam的别名
$ alias | grep gcam
// gcam='git commit -a -m'

# 自定义别名命令,只是自定义，与命令是否真实存在无关
# 比如查看alias ls => ls='ls -G'，所以自定义别名方式如下：
$ alias 别名=命令

# 取消别名
$ unalias 别名
```

#### **问题总结**

##### ** git push 时提示 Username for 'https://github.com':**

本地已经配了 ssh 登录，但推代码时提示这个，表示现在是 https 的方式，两种方式修改：

```bash
# 命令行修改
git remote set-url origin git@github.com:yuccie/jsArt.git
# 直接修改 .git/config文件
url = git@github.com:yuccie/jsArt.git
```
