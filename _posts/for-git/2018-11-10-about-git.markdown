---
layout: post
title: About git
date: Fri May 10 2019 17:25:20 GMT+0800 (中国标准时间)
---

参考：[阮一峰-常用 git 命令操作](http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html)

参考：[阮一峰-远程操作详解](http://www.ruanyifeng.com/blog/2014/06/git_remote.html)

参考：[阮一峰-工作流](http://www.ruanyifeng.com/blog/2015/12/git-workflow.html)

### SSH

为 Secure Shell 的缩写，是一种网络协议，用于计算机之间的加密登录，如果一个用户从本地计算机，使用ssh协议登录另一台远程计算机，我们可以认为这种登录是安全的，即使被中途截获，密码也不会泄露。ssh之所以安全，因为他采用公钥加密

**过程：**

1. 远程主机收到用户的登录请求，把自己的公钥发给用户，
2. 用户使用这个公钥，将登陆密码加密后，发送给远程主机，
3. 远程主机用自己的私钥，解密登录密码，如果密码正确，就登录成功。

但也有安全隐患，如果有人截获了登录请求（第一步），然后冒充远程主机，将伪造的公钥发送给用户，那么用户就很难辨别真伪。因为不像https协议那样，ssh协议的公钥是没有证书中心ca公证的，也就是说，都是自己签发。

可以设想，如果攻击者插在用户与远程主机之间（比如公共的wifi区域），用伪造的公钥，获取用户的登录密码，再用这个密码登录远程主机，那么ssh的安全机制就荡然无存。也是中间人攻击（Man-in-the-middle attack）

ssh分客户端openssh-client 和openssh-server，如果只是想登陆别人的机器，ssh只需安装openssh-client（ubantu 有默认安装），如果要想使本机开放ssh服务就需要安装openssh-server。

 ssh root@67.218.147.xxx  意思是，安全脚本连接系统用户是root，服务器地址是67.218.147.xxx，
 ssh默认连接的端口是22，如果想修改端口，需要加 ssh -p 端口号 root@67.218.147.xxx
 而ip地址可以通过设置hostname来改变。如上图中root@djch  但连接的时候，不建议这样，ip更加高效。

### openSSL

https是一种协议，等于http + TLS(由于历史原因，SSL3.0之后就被TLS1.0替代了)
openSSL是一套开源工具集(**注意:**HTTPS与OpenSSL就是iPhone与富士康的关系。)。

SSL是Secure Sockets Layer（安全套接层协议）的缩写，可以在Internet上提供秘密性传输。Netscape公司在推出第一个Web浏览器的同时，提出了SSL协议标准。其目标是保证两个应用间通信的保密性和可靠性,可在服务器端和用户端同时实现支持。已经成为Internet上保密通讯的工业标准。

SSL能使用户/服务器应用之间的通信不被攻击者窃听，并且始终对服务器进行认证，还可选择对用户进行认证。SSL协议要求建立在可靠的传输层协议(TCP)之上。SSL协议的优势在于它是与应用层协议独立无关的，高层的应用层协议(例如：HTTP，FTP，TELNET等)能透明地建立于SSL协议之上。SSL协议在应用层协议通信之前就已经完成加密算法、通信密钥的协商及服务器认证工作。在此之后应用层协议所传送的数据都会被加密，从而保证通信的私密性。

#### git相关

工作区：就是我们本地的目录，还没有被 git 管理
暂存区：git 开始管理，只是还没有提交到分支上
commit: commit 后就将暂存区的内容提到分支上了，如果此时在 git push 则把本地修改同步到远程

#### github连接超时

有时候在操作github仓库时，经常提示如下错误：

```bash
ssh_dispatch_run_fatal: Connection to 52.74.223.119 port 22: Operation timed out
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.

# 如果直接ping github.com，如下会提示超时
ping github.com
# PING github.com (52.74.223.119): 56 data bytes
# Request timeout for icmp_seq 0
# Request timeout for icmp_seq 1

# 因此到这里就可以基本锁定（本身网络没问题，github也没问题），dns解析有异常，因此可以增加hosts配置如下：
192.30.255.112  github.com git 
185.31.16.184   github.global.ssl.fastly.net 

# 上面方式会变化，可以如下操作，
# 获取Github相关网站的最新ip
# 访问https://www.ipaddress.com，拉下来，找到页面中下方的“IP Address Tools”
# 分别输入github.global.ssl.fastly.net和github.com，查询ip地址

140.82.114.4	github.com
199.232.69.194	github.global.ssl.fastly.net

# 配置完。可以看下下载速度。。。825k/s。。。之前都是15-20k/s，可见效果飞一样
# Receiving objects:  30% (16799/55994), 9.66 MiB | 825.00 KiB/s   
```

#### 本地配置多git账户

经常情况下，我们一个电脑需要配置多个账户，比如公司的仓库和自己的github账号。

```bash
# 可以查看自己配置邮箱和name
git config --global --get user.name
git config --get user.name

git config --global --get user.email
git config --get user.email

# 重置
git config --global --unset user.name

# 重新赋值
git config --global user.name dujc
```

配置git的时候会使用git config，那么git config、git config --global、git config --system之前有何区别呢？

- 执行 git config -e 后，控制台打印的是当前目录下的.git/config文件
- 执行 git config -e --global 后，控制台打印的是用户家目录.git/config文件
- 执行 git config -e --system 后，控制台打印的是整个电脑系统的.git/config文件
  
如果同时配置了这三种文件，那优先级就是：git config > git config --global > git config --system，也就是优先以项目录里的配置为准。因此想要设置什么级别的，只需添加对应的标识即可（global，system）

与仓库联系，一般我们都是通过秘钥方式，也就是本地生成一对秘钥(一般用用邮箱即可)，然后公钥放在远程（比如github），本地存放私钥。秘钥生成完以后，因为我们一台电脑既要连gitlab又要连gihub，因此生成的秘钥不能重名，另外就是需要一个配置文件，将两份秘钥分别指向不同的远程地址；

#### bash代理

要在 Mac 终端中设置代理，请按照以下步骤进行：

打开终端应用程序，输入以下命令并按回车键：

```bash
nano ~/.bash_profile
# 这将打开一个名为 .bash_profile 的文件，如果该文件不存在，则会创建一个新文件。

# 在 .bash_profile 文件中添加以下命令：

export http_proxy=http://<proxy_host>:<proxy_port>
export https_proxy=https://<proxy_host>:<proxy_port>
# 将 <proxy_host> 和 <proxy_port> 替换为您的代理服务器的主机名和端口号。如果您的代理服务器需要身份验证，则可以添加以下命令：


export http_proxy=http://<username>:<password>@<proxy_host>:<proxy_port>
export https_proxy=https://<username>:<password>@<proxy_host>:<proxy_port>
# 将 <username> 和 <password> 替换为代理服务器的用户名和密码，如果代理服务器不需要身份验证，则可以省略这些参数。

# 保存并关闭文件，然后执行以下命令以使更改生效：

source ~/.bash_profile
# 这将重新加载您的 Bash shell 配置文件，并使代理设置生效。

# 现在，您已经成功地在 Mac 终端中设置了代理。请注意，这些设置只会影响您在终端中运行的命令和应用程序，而不会影响您在浏览器或其他应用程序中的网络连接。如果您希望在整个系统中使用代理，请参考 macOS 系统设置中的网络代理设置。
```

因此电脑上，常用的http、控制台、ssh代理就都有了。

#### ssh 代理

ProxyCommand 是一种用于 SSH 配置文件中的选项，它可以让您通过跳板机或代理服务器连接到远程主机。在 SSH 连接过程中，ProxyCommand 可以在本地计算机上打开一个通道（channel），并将数据通过代理服务器转发到远程主机上，这样您就可以绕过网络限制，连接到无法直接访问的远程主机。

具体来说，ProxyCommand 选项可以指定一个 shell 命令，用于在本地计算机上启动一个代理通道并将 SSH 连接通过该通道转发到远程主机。例如，以下命令将通过跳板机 jump.example.com 连接到远程主机 remote.example.com：


```bash
ssh -o ProxyCommand="ssh user@jump.example.com nc remote.example.com 22" remote.example.com
```

在上面的命令中，-o ProxyCommand 选项用于指定代理命令，该命令通过 SSH 连接到跳板机 jump.example.com，并使用 nc（netcat）命令打开一个通道以将数据转发到远程主机 remote.example.com 的 SSH 服务上。最后，remote.example.com 参数指定要连接的远程主机名称。

通过 ProxyCommand 选项，您可以使用各种方法建立代理通道，包括 SSH 连接、HTTP 代理、SOCKS 代理等。这使得 ProxyCommand 成为连接到无法直接访问的远程主机的有力工具，同时也增加了网络安全风险，请务必谨慎使用。

其实ssh一般在代码仓库时使用，此时可以在 ~/.ssh/config里配置

```bash
Host github.com
HostName github.com
PreferredAuthentications publickey
IdentityFile ~/.ssh/id_rsa
# 下面就是配置代理
ProxyCommand=nc -x 127.0.0.1:7890 %h %p
```

这是一个 SSH 配置文件中的 ProxyCommand 选项，用于通过代理服务器连接到远程主机。具体来说，这个命令使用 nc 命令打开一个代理通道，将 SSH 连接通过代理服务器转发到远程主机上。下面是各个部分的解释：

- ProxyCommand=：表示开始一个 ProxyCommand 配置选项。
- nc：表示使用 nc 命令打开一个 TCP 连接。
- -x 127.0.0.1:7890：表示使用 SOCKS5 代理服务器，代理服务器地址为 127.0.0.1，代理服务器端口为 7890。其中 -x 参数表示使用代理服务器，127.0.0.1 是代理服务器的地址，7890 是代理服务器的端口。
- %h：表示代表 SSH 连接的目标主机名。host？
- %p：表示代表 SSH 连接的端口号。port?

因此，这个命令的作用是将 SSH 连接通过 127.0.0.1:7890 代理服务器连接到目标主机和端口号所指定的远程主机上，从而实现了通过代理服务器连接到远程主机的目的。请注意，nc 命令通常用于测试网络连接和端口扫描，需要谨慎使用。

#### socks4 vs scoks5 

SOCKS4 和 SOCKS5 都是代理协议，用于通过代理服务器连接到 Internet 上的其他主机。它们的主要区别在于以下几点：

- 认证方式：SOCKS4 仅支持无身份验证的代理连接，而 SOCKS5 支持多种身份验证方式，包括用户名/密码、GSSAPI 和 TLS/SSL 证书等。

- 命令支持：SOCKS4 仅支持 CONNECT 命令，用于连接到目标主机，而 SOCKS5 还支持 BIND 和 UDP ASSOCIATE 命令，用于绑定端口和 UDP 流量转发。

- 数据传输：SOCKS4 只支持 TCP 数据传输，而 SOCKS5 支持 TCP 和 UDP 数据传输。

- 网络安全：SOCKS5 提供了更强的网络安全功能，支持加密传输和访问控制等功能，可以更好地保护数据和隐私。

总的来说，SOCKS5 相对于 SOCKS4 具有更多的功能和更强的安全性，但也更复杂一些。如果您只需要简单的代理功能，那么 SOCKS4 可能更加适合您的需求。如果您需要更高级的功能和更好的安全性，那么 SOCKS5 可能更适合您的需求。


#### HTTP 代理 vs SOCKS 代理
其实就是不同代理不同协议间的区别

HTTP 代理和 SOCKS 代理都是代理服务器类型，主要区别在于它们支持的协议和功能不同：

协议支持：HTTP 代理主要用于代理 HTTP 和 HTTPS 流量，通常无法代理其他协议的流量，例如 FTP、SMTP 等。而 SOCKS 代理可以代理任何 TCP 或 UDP 流量，包括 HTTP、FTP、SMTP 等协议。

功能支持：HTTP 代理通常支持缓存和访问控制等功能，可以提高访问效率和安全性。SOCKS 代理则通常没有缓存功能，但支持更多的身份验证方式和远程 DNS 解析等高级功能。

实现方式：HTTP 代理通常实现为 Web 服务器插件或独立程序，与 Web 浏览器配合使用。而 SOCKS 代理则是作为单独的网络服务运行的，可以供多种应用程序使用。

总的来说，HTTP 代理适合于代理 Web 浏览器等 HTTP/HTTPS 协议的应用程序，提供了高效的缓存和访问控制功能；SOCKS 代理适合于代理任何 TCP 或 UDP 流量的应用程序，提供了更加灵活和高级的身份验证和远程 DNS 解析等功能。在选择代理服务器时，需要根据具体的需求和使用场景选择适合的代理类型。

#### **密钥生成**

每个SSH用户都有自己的`known_hosts`文件，此外系统也有一个这样的文件，通常是`/etc/ssh/_known_hosts`，保存一些对所有用户都可信赖的远程主机的公钥。`id_rsa.pub`是本机的公钥，`id_rsa`是本机的私钥。

```bash
# ~/.ssh 目录是一些密钥信息
# 若不添加任何信息可以直接执行下面命令，然后一路回车，
# 此时会生成id_rsa，id_rsa_pub，只需要将后者拷贝到远程对应服务器即可
ssh-keygen

# 但是若想一台电脑建立多个ssh连接，则需要为每个秘钥生成不同的名字
ssh-keygen -t rsa -C "your_mail@example.com" -f ~/.ssh/my_example_rsa
# -t 后面跟秘钥的类型，这里是rsa
# -C 是密钥的注释，一般在生成的秘钥最后面
# -f 因为默认都会生成同样的秘钥名字，这里相当于重命名
# 此时会在~/.ssh目录生成my_example_rsa和my_example_rsa.pub两个文件
# 只需将my_example_rsa.pub拷贝到远程
# 注意：还需要在~/.ssh目录增加(若没有)config文件，然后里面配置如下信息

#------------
# missfresh-gitlab（这是区分不同的用户名，自定义即可）
Host gitlab.missfresh.net
HostName gitlab.missfresh.net
PreferredAuthentications publickey
IdentityFile ~/.ssh/missfresh-gitlab-rsa

# 配置文件参数
# Host : 别名,随便取
# HostName : 如果要登录的主机名为git@gitlab.missfresh.net:xxx.git,则Host为：gitlab.missfresh.net
# User : 登录名,最好用账户邮箱
# PreferredAuthentications: 优先使用哪个方式验证,支持秘钥(publickey)和密码(password)方式
# IdentityFile : 指明对应用户的私钥文件地址(私钥的权限600)
#------------

# 配置完可以测试一下：
# @前面的协议一般都为git，后面的地址就是上面HostName
ssh -T git@gitlab.missfresh.net
# 还可以直接通过别名方式：ssh -T Hostxxx
# 若输出类似一下信息，则代表成功：
Hi xxx! You have successfully authenticated, but GitHub does not provide shell access.

# 可以打印详细信息，尤其连接有问题时
ssh -T -v git@gitlab.missfresh.net

# 如果正常操作后，还是提示permission denied就执行
ssh-add -k ~/.ssh/gitlab_rsa

# 有时候会打印：Permissions 0644 xxx are too open.
# 此时只需给指定的文件添加权限即可：
chmod 600 文件名

# 提示：Enter passphrase for key xxx
# 为了避免每次都提示输入，可以执行如下命令将私钥添加进钥匙串
ssh-add -K ~/.ssh/对应私钥文件名
# 但需要注意：ssh-add 这个命令不是用来永久性的记住你所使用的私钥的。实际上，它的作用只是把你指定的私钥添加到 ssh-agent 所管理的一个session 当中。而 ssh-agent 是一个用于存储私钥的临时性的 session 服务，也就是说当你重启之后，ssh-agent服务也就重置了。
# 还有人说，秘钥重新生成走一遍流程就好，但也不一定。。。
# 参考：https://help.github.com/cn/github/authenticating-to-github/working-with-ssh-key-passphrases

# 还可以直接在 当前所用的shell里配置，就免得每次手动操作，比如当前我的shell是zsh
# 修复每次关机重启都需要验证git登录信息,这里只是将每次的操作挪到终端自动执行而已.
ssh-add -K ~/.ssh/yuccie1617@gmail.com
参考：https://blog.csdn.net/superbfly/article/details/75287741
```

使用密码登录，每次都需要输入密码，非常麻烦，好在`ssh`提供公钥登录，可以省去输入密码的步骤。所谓公钥登录，原理就是用户将自己的公钥存储在远程主机上，登录时，远程主机会向用户发送一段随机字符串，用户用自己的私钥加密后再发给远程主机，远程主机用事先存储用户的公钥解密，如果成功，则客户的是可信的，直接允许登录`shell`，不再要求密码。

#### Shelljs - Unix shell commands for Node.js

Shelljs是Node.js下的脚本语言解析器，具有丰富且强大的底层操作(Windows/Linux/OS X)权限。Shelljs本质就是基于node的一层命令封装插件，让前端开发者可以不依赖linux也不依赖类似于cmder的转换工具，而是直接在我们最熟悉不过的javascript代码中编写shell命令实现功能。

这个库能够让我们在js文件中执行shell命令，具体可以看文档。

**全局与局部（Global vs. Local）**

我们不再推荐使用 ShellJS 的全局导入（即require('shelljs/global')）。虽然仍然支持这种便利，但这会污染全局命名空间，因此只应谨慎使用。

相反，我们推荐本地导入（npm 包的标准）：

```bash
var shell = require('shelljs');
shell.echo('hello world');
```

#### git 查看终端帮助文档

```bash
# 比如查看git commit相关，可以如下
$ git help commit
```

#### .gitignore 规则不生效的解决办法

原因是.gitignore 只能忽略那些原来没有被 track 的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore 是无效的。那么解决方法就是先把本地缓存删除（改变成未 track 状态），然后再提交：

**注意：** `git rm`是删除暂存区和分支上的文件，同时本地也不需要了，使用。而`git rm --cached`只是删除暂存区和分支上的，本地还需要，只是不被版本控制了。其实若想用`git`管理文件，则使用`git rm`相关，若新建一个文件，并没有提交到暂存区，此时用`git rm或git rm --cache`是找不到这个文件的，此时应该直接用`rm`

```bash
git rm -r --cached 文件名
# 或 git rm -r --cached .
git add .
git commit -m 'update .gitignore'
```

匹配规则：

- 所有空行或#开头的行都会被忽略；
- 文件或目录前加 / 表示仓库根目录的对应文件；
- 匹配模式最后跟反斜杠 / 说明要忽略的是目录；
- 要特殊不忽略某个文件或目录，可以在模式前加上取反 ! 。

```bash
# 忽略目录 fd1 下的全部内容，不管是根目录的还是子目录的，但不屏蔽fd1目录本身
fd1/*
# 屏蔽fd1目录
fd1/
# 只忽略根目录fd1下的所有
/fd1/*
# 所有以 '.a' 为后缀的文件都屏蔽掉
*.a
# 可以使用!来否定忽略，即比如在前面用了*.a，然后使用!lib.a，则这个!lib.a不会被忽略。
!lib.a
# 仓库中所有名为 tags 的文件都屏蔽
tags
# 仓库中所有以 'core.' 开头的文件都屏蔽
core.*
# *用来匹配零个或多个字符，如*.[oa]忽略所有以".o"或".a"结尾，
# *~忽略所有以~结尾的文件（这种文件通常被许多编辑器标记为临时文件）；
# []用来匹配括号内的任一字符，如[abc]，也可以在括号内加连接符，如[0-9]匹配0至9的数；
# ?用来匹配单个字符。

# mac系统创造的隐藏文件
.DS_Store

# idea编辑器用来存放配置信息的文件
.idea

# 忽略根目录，子目录中所有node_modules及子其目录
node_modules

# 忽略根目录，子目录中所有dist及子其目录
dist

# 忽略根目录public及其子目录
/public

```

#### git 常用操作

```bash
# 丢弃暂存区修改,注意这里是已经被跟踪的文件
$ git checkout -- .

# 丢弃暂存某个文件修改
$ git checkout -- xxx

# 丢弃未追踪(untracked)的文件（也就是工作区）,后可跟具体文件，不跟则全部删除
$ git clean -f

# 连untracked的目录（工作区）也一块删掉
$ git clean -fd

# 若untracked的目录有子目录，可以如下全部删除
$ git clean -fd -f

# 删除某个分支（强制删除：-D）
$ git branch -d xxx

# 删除远程分支
$ git push origin --delete xxx

# 修改分支名（未推到远程）
$ git branch -m oldName newName

# 修改分支名（推到远程）
$ git branch -m oldName newName                 # 1. 修改本地
$ git push origin --delete oldName               # 2. 删除远程
$ git push origin newName                       # 3. 推到远程
$ git branch --set-upstream-to=origin/newName   # 4. 本地与远程相关联

# 保存当前修改，再拉取远程更新或切换到远程
$ git stash

# 想再恢复之前的保存，用如下命令
$ git stash pop

# 重命名本地分支名
$ git branch -m old-name new-name

# 查看带详细分支图的提交日志
$ git log --graph

# 只查看commit的详细分支图
$ git log --graph --pretty=oneline --abbrev-commit

# 修改已经提交的commit，会让你修改上次的提交内容
git commit --amend

# 查看本地的tag
git tag

# 新建tag，注意xxx可以很多，但必须是连续的字符串，如：v1.0.0_测试tag，若中间断开，则tag只会是一部分
git tag xxx

# 删除tag
git tag -d xxx

# 删除远程的tag
git push origin :refs/tags/<tagname>

# 推送所有的tags到远程
git push [origin] --tags # 或者 git push --tags

# 推送某个tag到远程
git push origin tagxx

```


git出现Your branch and ‘origin/master‘ have diverged(分歧)解决方法
```bash
# 如果不需要保留本地的修改，只要执行下面两步：
git fetch origin
git reset --hard origin/master

# 当我们在本地提交到远程仓库的时候，如果遇到上述问题，我们可以首先使用如下命令：
git rebase origin/master

# 然后使用
git pull --rebase

# 最后使用
git push origin master

```


#### 禁用 package-lock.json

```bash
# 当前项目里禁用
echo 'package-lock=false' >> .npmrc
echo 'package-lock.json' >> .gitignore

# 当前机器当前用户，所有项目禁用
npm config set package-lock false
```

到底是否需要使用package.json-lock.json文件：

package-lock.json 不应写进 .gitignore。

这点无论你是否使用 lock 都是一样的。具体来说：如果你使用 lock 机制，则应该将 package-lock.json 提交到 repo 中。比如 Vue 采取了该策略。

如果你不使用 lock 机制，则应该加入 .npmrc 文件，内容为 package-lock=false ，并提交到 repo 中。比如 ESLint 采取了该策略。

例外是，如果你使用 yarn 并且不打算使用 npm，则可以把 package-lock.json 列入 .gitignore（比如 Babel）；反之如果你使用 npm 并且不打算使用 yarn，则可以把 yarn.lock 列入 .gitignore （比如 TypeScript）。

如果你不按照上述方式做，请确定你清楚自己在干什么。比如 jQuery 为什么把 package-lock.json 写入 .gitignore 可以看其 commit message：Build: Remove package-lock.json, add it to .gitignore · jquery/jquery@7037fac 。简单说就是 optional 依赖包会导致不同平台上的 package-lock.json 发生变更。jQuery 的人认为这有问题，所以暂时性 ignore 了它。先不管是不是有更好的方式或者其他 workaround，最新的 npm 5.6.0 其实已经解决了这个问题。（想混个 jQuery contributor 的同学可以赶紧去提交 PR 了，成功之后可以给我发个红包当谢礼。）

在npm@5.4.2版本后的表现：

- 无package-lock.json，npm i 根据package.json进行安装，并生成package-lock.json
- package.json和package-lock.json的版本不兼容，npm i 会以package.json为准进行安装，并更新package-lock.json
- package.json和package-lock.json的版本兼容，npm i 会以package-lock.json为准进行安装。


[package-lock.json 需要写进 .gitignore 吗？](https://www.zhihu.com/question/264560841)

#### fatal: refusing to merge unrelated histories

```bash
# 有时候操作git，会导致本地和远程分支不相关，比如删除.git，此时可以强制绑定
git pull origin master --allow-unrelated-histories
```

#### 命令行初始化一个仓库

```bash
echo "# test" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin git@xxx/xxx.git
git push -u origin master
```

#### 添加一个已有的仓库

```bash
# 只是初始化一个仓库的后两个步骤
git remote add origin git@xxx/xxx.git
git push -u origin master
```

#### git 远程主机常用操作

```bash
# 查看远程主机名(-v 查看远程主机的详细地址)
$ git remote
// origin

# 查看远程主机详细信息
$ git remote show <主机名>

# 添加远程主机
$ git remote add <主机名> <仓库地址>

# 删除远程主机
$ git remote rm <主机名>

# 重命名远程主机名
$ git remote rename <原主机名> <新主机名>

# 修改远程仓库地址，url地址有https与ssh两种
$ git remote set-url origin [url]

# 远程分支已删除，本地还没删除，可以通过以下命令同步一下
$ git remote prune origin
```

#### git fetch

```bash
# 获取指定远程主机上所有分支的更新
$ git fetch <远程主机名>

# 获取指定远程主机,指定分支上的更新
$ git fetch <远程主机名> <分支名>

# 获取的远程更新，需用 远程主机名/分支名 读取，切换到获取的更新master分支
$ git checkout origin/master

# 在获取的远程更新分支基础上新建分支
$ git checkout -b newBranch origin/master

# 将获取的远程master更新分支合并到当前分支
$ git merge origin/master
或者
$ git rebase origin/master
```

#### git pull

```bash
# 获取远程next分支的更新，然后合并到本地master分支
# 若合并到本地当前分支，则省略冒号后面的部分
$ git pull origin next:master

# 上面操作等同于下面操作
$ git fetch origin
$ git merge origin/next

# 在clone仓库时，git会自动在本地与远程同名分支之间，建立一种追踪关系（tracking）
# 当然也可以手动建立追踪关系，如下本地master与远程next分支
# $ git branch --set-upstream master origin/next // 这个命令废弃了
git branch --set-upstream-to=origin/myBranch myBranch

# 如果当前分支与 远程追踪分支 存在追踪关系，可以省略远程追踪分支名
# 当前分支还可以同时追踪多个远程分支？？
$ git pull origin

# 如果当前分支只有一个追踪分支，主机名都可以省略
$ git pull

# 远程删除了某些分支，如果本地也想删除这些分支，可以如下：
$ git pull -p
```

#### git push

```bash
# 将本地master分支的更新推送到远程主机next分支上
$ git push origin master:next

# 省略远程分支名，则表示将本地分支推送到与之存在追踪关系的远程分支。推送本地分支到远程分支
# 如果远程分支不存在，则会新建
$ git push origin master

# 如果省略本地分支，则表示删除指定的远程分支
# 因为这等同于推送一个空的本地分支到远程
$ git push origin  :master
# 等同于
$ git push origin  --delete master

# 如果当前分支与 远程追踪分支 存在追踪关系，则可以省略本地及远程分支
$ git push origin

# 如果当前分支只有一个追踪分支，主机名都可以省略
$ git push

# 如果当前分支与多个主机存在追踪关系，则可以使用-u指定一个默认主机
# 如下将本地master分支推送到origin主机，同时指定origin为默认主机
$ git push -u origin master

# 如果远程主机版本比本地版本新，推送时会报错，应该先pull再push
# 如果强推则会覆盖远程，如下
$ git push --force origin


# 把本地的某个分支强制推送到master
git push origin XXX:master -f

2.切换到旧分支master
git checkout master

# 下载远程仓库最新内容，不合并
git fetch --all

# 
git reset --hard origin/master
```

#### git rebase

参考：[廖雪峰-git rebase 解析](https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0015266568413773c73cdc8b4ab4f9aa9be10ef3078be3f000)

参考：[failed to push some refs to](https://blog.csdn.net/MBuger/article/details/70197532)

```bash
# 多人开发一个分支时，远程更新后，本地commit后直接push后会出错，此时若先pull后push，则提交记录会分叉
# 为了让提交记录在一条直线上同时解决问题，可以如下，然后push即可
$ git pull --rebase origin master

# 可以根据不同的提示，修复不同的问题，如下：
# Resolve all conflicts manually, mark them as resolved with
# "git add/rm <conflicted_files>", then run "git rebase --continue".
# You can instead skip this commit: run "git rebase --skip".
# To abort and get back to the state before "git rebase", run "git rebase --abort".
```

`git pull --rebase origin master`意为先取消commit记录，并且把它们临时 保存为补丁(patch)(这些补丁放到".git/rebase"目录中)，之后同步远程库到本地，最后合并补丁到本地库之中。其实就是先把远程的更新插入到提交树上，然后将自己的提交放在挪到了最后，从而看起来所有的提交都在一条线上。

#### 代码回滚

```bash
# 代码已经提送至远程，可以用 git revert，
# 注意另外一个好处就是：不是重写之前的提交记录，而是增加记录，而且是撤销指定的提交。
# 表示回滚到上一次提交(其实就是撤销最近一次的提交)
git revert HEAD

# 指定回滚到哪一次，如果想撤销不连续的提交，可以空格分开
git revert HEAD~3

# 若是想直接回滚到某个点，可以直接
# 之前的提交记录会被移除，慎用
git reset --hard 提交记录

# 可以使用如下，保留修改记录，只是把commit取消了
git reset --soft HEAD^

# 回滚到某次提交后，如果想再回来，直接git checkout 对应分支就行

# 对一个仓库，执行了多次操作后，查看操作记录
git reflog

# 其实每次的hash缩写都是全部的一部分，如下：
304942647b31a2dfb6f7d7718295cddd900d947a -> 30494264
# 但是也有的是六位
4d83cfcbaef648345571d77db867b6f9e4146ba7 -> 4d83cf
```

```bash
# git bisect（一分为二）是一个很有用的命令，用来查找哪一次代码提交引入了错误。
# 其实原理就是 二分法，不断改变上下限指定的提交。

# 下面通过一个例子
git clone git@github.com:bradleyboy/bisectercise.git
cd bisectercise
open index.html

# 现在，就要来查找，到底哪一次代码提交，引入了错误。首先，检查一下代码提交历史。

git log --pretty=oneline
# 可以看到，这个库一共有101次提交。最早的第一次提交的哈希是4d83cf。

# git bisect start命令启动查错，它的格式如下。

git bisect start [终点] [起点]
# 上面代码中，"终点"是最近的提交，"起点"是更久以前的提交。它们之间的这段历史，就是差错的范围。

# 这个例子中，我们选择全部的代码历史。起点是第一次提交4d83cf，终点是最近一次的HEAD。当然，指定其他范围也可以。

git bisect start HEAD 4d83cf
# 执行上面的命令以后，代码库就会切换到这段范围正当中的那一次提交，本例是第51次提交。

# 现在刷新浏览器，点击+按钮，发现可以正常递增。使用git bisect good命令，标识本次提交（第51次）没有问题。

git bisect good
# 既然第51次提交没有问题，就意味着错误是在代码历史的后半段引入的。执行上面的命令，Git 就自动切换到后半段的中点（第76次提交）。

# 现在刷新浏览器，点击+按钮，发现不能正常递增。使用git bisect bad命令，标识本次提交（第76）有问题。

git bisect bad
# 执行上面的命令以后，Git 就自动切换到第51次到第76次的中点（第63次提交）。

# 接下来，不断重复这个过程，直到成功找到出问题的那一次提交为止。这时，Git 会给出如下的提示。

b47892 is the first bad commit
# 既然找到那个有问题的提交，就可以检查代码，确定具体是什么错误。

# 然后，使用git bisect reset命令，退出查错，回到最近一次的代码提交。

git bisect reset
# 现在就可以开始修复错误了。
```

#### 暂存区与工作区

工作区：其实就是电脑里可以看到的目录
暂存区：git在真正推到远程之前，会先把改动放到暂存区，然后才是推到远程
    - 放在暂存区的标志是，提示你：git resore
    - 不在暂存区的标志是，提示你：git add，

综合下面的案例，其实我们知道，通过 `git reflog`可以查看当前仓库过去一段时间内的所有操作记录，然后通过 `git reset --hard xxx提交` 可以完全回到过去，如果使用 `--soft` 的话，则有些变动会保存在暂存区，需要二次commit才行。

如果，只是想修改上次的commit内容，此时可以使用 --soft ，从而保留暂存区，然后再次提交

```bash
# 将当期分支的指针倒退三个 commit，
# 并且会改变暂存区
$ git reset HEAD~3

# 倒退指针的同时，不改变暂存区
$ git reset --soft HEAD~3

# 倒退指针的同时，改变工作区
$ git reset --hard HEAD~3

# 撤销上一次向暂存区添加的所有文件
$ git reset

# 无任何效果
$ git reset --soft

# 同时撤销暂存区和工作区的修改，
# 回复到上一次提交的状态
$ git reset --hard

# 撤销上一次向暂存区添加的某个指定文件，
# 不影响工作区中的该文件
$ git reset -- <filename>
```


```bash
# 在 Git 中，可以使用git cherry-pick命令将某个分支中的某个提交合并到另一个分支中。具体的操作步骤如下：

# 切换到要合并的目标分支，例如：
git checkout master
# 运行以下命令，将指定的提交合并到当前分支：
git cherry-pick <commit>
# 其中，<commit>是要合并的提交的 SHA-1 标识符。

# 如果要合并的提交不止一个，可以将多个 SHA-1 标识符放到一个列表中：
git cherry-pick <commit1> <commit2> <commit3>
```

#### bash 常用操作

```bash
# 查看gcam中每个参数的意义
$ git help commit
// -a, --all
// Tell the command to automatically stage files that have been modified and deleted, but new files you have not told Git about are not affected.

# 用于查找并显示给定命令的绝对路径(),但mac下如下显示
$ which gcam
// gcam: aliased to git commit -a -m

# 对比一下alias
# 在终端使用git的一些alias，需要先安装oh-my-zsh
$ alias gcam
// gcam='git commit -a -m'
```

### oh my zsh 常用操作

参考：[oh-my-zsh](https://github.com/robbyrussell/oh-my-zsh/blob/master/plugins/git/git.plugin.zsh)

```bash
# 查看所有别名,当然除了oh-my-zsh的命令别名，还有系统级别的，比如ls
$ alias

# 管道符查看含gcam的别名
$ alias | grep gcam
// gcam='git commit -a -m'

# 自定义别名命令,只是自定义，与命令是否真实存在无关
# 比如查看alias ls => ls='ls -G'，所以自定义别名方式如下：
$ alias 别名=命令

# 取消别名
$ unalias 别名
```

#### **问题总结**

##### ** git push 时提示 Username for 'https://github.com':**

本地已经配了 ssh 登录，但推代码时提示这个，表示现在是 https 的方式，两种方式修改：

```bash
# 命令行修改
git remote set-url origin git@github.com:yuccie/jsArt.git
# 直接修改 .git/config文件
url = git@github.com:yuccie/jsArt.git
```
